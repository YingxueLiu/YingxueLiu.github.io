---
layout:     post
title:      "Traits"
subtitle:   "Traits"
date:       2016-11-9
author:     "YingxueLiu"
category:  技术
tags:
    - 技术
    - Trait
---
#Traits
>ThinkPHP 5.0开始采用trait功能（PHP5.4+）来作为一种扩展机制，可以方便的实现一个类库的多继承问题。

1、 `use HelloWorld { sayHello as private myPrivateHello; }`修改权限

2、解决冲突

	`B::smallTalk insteadof A;
     A::bigTalk insteadof B;
     B::bigTalk as talk;`

3、 trait可以使用trait

4、支持抽象方法

5、Traits 可以被静态成员静态方法定义

<code>
<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
?>
</code>


6、如果 trait 定义了一个属性，那类将不能定义同样名称的属性，否则会产生一个错误。如果该属性在类中的定义与在 trait 中的定义兼容（同样的可见性和初始值）则错误的级别是 E_STRICT，否则是一个致命错误

7、继承自trait的静态变量有实例
<code>
<?php
class TestClass {
    public static $_bar;
}
class Foo1 extends TestClass { }
class Foo2 extends TestClass { }
Foo1::$_bar = 'Hello';
Foo2::$_bar = 'World';
echo Foo1::$_bar . ' ' . Foo2::$_bar; // Prints: World World
?>
</code>
<code>
<?php
trait TestTrait {
    public static $_bar;
}
class Foo1 {
    use TestTrait;
}
class Foo2 {
    use TestTrait;
}
Foo1::$_bar = 'Hello';
Foo2::$_bar = 'World';
echo Foo1::$_bar . ' ' . Foo2::$_bar; // Prints: Hello World
?>
</code>

8、"final"关键字直接使用，不要用继承和abstract 类

9、`echo "Class: " . __CLASS__ . PHP_EOL;`返回引用他的类，而不是调用这个类方法的类

10、`http://php.net/manual/zh/language.oop5.traits.php` 54